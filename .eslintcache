[{"/Users/dmitry/projects/serverless/childAssets/src/folderStructure.ts":"1","/Users/dmitry/projects/serverless/childAssets/src/handler.ts":"2"},{"size":9770,"mtime":1594647280000,"results":"3","hashOfConfig":"4"},{"size":7194,"mtime":1594636694464,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"17vr2nx",{"filePath":"8","messages":"9","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"/Users/dmitry/projects/serverless/childAssets/src/folderStructure.ts",["11"],"/Users/dmitry/projects/serverless/childAssets/src/handler.ts",["12","13"],"import { APIGatewayProxyHandler, APIGatewayProxyEvent } from \"aws-lambda\";\nimport fetch, { Response } from \"node-fetch\";\nimport { JSONPath } from \"jsonpath-plus\";\nimport { parse } from \"node-html-parser\";\n\nfunction getHtmlByAssetType(assetType: string, assetJSON: AssetJSON) {\n  switch (assetType) {\n    case \"LandingPage\":\n      return assetJSON.htmlContent.html || assetJSON.htmlContent.htmlBody;\n      break;\n    case \"SharedContent\":\n      return assetJSON.contentHtml.html || assetJSON.contentHtml.htmlBody;\n      break;\n    case \"EmailHeader\":\n    case \"EmailFooter\":\n      return assetJSON.body;\n      break;\n    case \"DynamicContent\":\n      return (\n        assetJSON.defaultContentSection?.contentHtml?.html ||\n        assetJSON.defaultContentSection?.contentHtml.htmlBody\n      );\n      break;\n    default:\n      return null;\n      break;\n  }\n}\n\nfunction findNode(object: Record<string, any>, key: string) {\n  let value: string;\n  Object.keys(object).some((k: string) => {\n    if (k === key) {\n      value = object[k];\n      return true;\n    }\n    if (object[k] && typeof object[k] === \"object\") {\n      value = findNode(object[k], key);\n      return value !== undefined;\n    }\n    return false;\n  });\n  return value;\n}\n\nfunction getAssetsIdByJSONPath(\n  json: AssetJSON | Array<any>,\n  expression: string,\n  nodeValue: string\n) {\n  const assetsId = [];\n  const assets = JSONPath({ path: expression, json });\n  assets.forEach((el: Node | string) => {\n    if (typeof el === \"string\" || typeof el === \"number\") {\n      assetsId.push(el);\n    } else if (typeof el === \"object\") {\n      // console.log(el, nodeValue);\n      if (el.id && findNode(el, nodeValue))\n        assetsId.push(findNode(el, nodeValue));\n    }\n  });\n  return assetsId;\n}\n\nexport const index: APIGatewayProxyHandler = async (\n  event: APIGatewayProxyEvent\n) => {\n  const promises: Promise<void>[] = [];\n  const body: Body = JSON.parse(event.body);\n  const finalResult = [];\n\n  const response = await fetch(\n    `http://apps.portqii.com:8070/getChilAssetConfigurationsByAssetType?AssetType=${body.assetType}`\n  );\n  const childAssetsConfiguration: childAssetsConfiguration[] = await response.json();\n  // console.log(body.assetType, childAssetsConfiguration);\n\n  for (const item of childAssetsConfiguration) {\n    item.JSON_Node_Value = item.JSON_Node_Value.trim();\n    let childAssetIdArray = [];\n    if (item.JSON_Node_Type_In_Parent === 0) {\n      if (body.assetType === \"Form\" && !item.JSONPath_Expression) {\n        childAssetIdArray = getAssetsIdByJSONPath(\n          [...body.assetJSON.elements, ...body.assetJSON.processingSteps],\n          `$..${item.JSON_Node_Value}`,\n          item.JSON_Node_Value\n        );\n        // console.log(item.JSON_Node_Value, childAssetIdArray);\n      } else if (item.JSONPath_Expression) {\n        childAssetIdArray = getAssetsIdByJSONPath(\n          body.assetJSON,\n          item.JSONPath_Expression,\n          item.JSON_Node_Value\n        );\n      } else {\n        childAssetIdArray = getAssetsIdByJSONPath(\n          body.assetJSON,\n          `$..${item.JSON_Node_Value}`,\n          item.JSON_Node_Value\n        );\n      }\n    } else {\n      childAssetIdArray = getAssetsIdByJSONPath(\n        body.assetJSON,\n        item.JSONPath_Expression || item.JSON_Node_Value,\n        item.JSON_Node_Value\n      );\n    }\n\n    // console.log(\n    //   item.JSON_Node_Type_In_Parent\n    //     ? item.JSONPath_Expression || item.JSON_Node_Value\n    //     : `$..${item.JSON_Node_Value}`,\n    //   getAssetsIdByJSONPath(\n    //     body.assetJSON,\n    //     item.JSON_Node_Type_In_Parent\n    //       ? item.JSONPath_Expression || item.JSON_Node_Value\n    //       : `$..${item.JSON_Node_Value}`,\n    //     item.JSON_Node_Value\n    //   )\n    // );\n\n    if (childAssetIdArray.length) {\n      promises.push(\n        fetch(`\n        http://apps.portqii.com:8070/getChildAssetEndPointsByJSON_Node_TypeAndJSON_Node_Value?JSON_Node_Value=${item.JSON_Node_Value}&JSON_Node_Type=${item.JSON_Node_Type}\n      `).then(async (r: Response) => {\n          const endpoints: Endpoint[] = await r.json();\n          if (endpoints.length) {\n            const result = await (\n              await fetch(\n                `http://apps.portqii.com:8070/getAssetTypeByEndpointUrl?Endpoint_URL=${encodeURIComponent(\n                  endpoints[0].Endpoint_URL\n                )}&JSON_Node_Value=${item.JSON_Node_Value}`\n              )\n            ).json();\n            const assetData = result[0];\n            if (assetData) {\n              childAssetIdArray.forEach((childAsset) => {\n                finalResult.push({\n                  childAssetType: assetData.Asset_Type,\n                  childAssetId: childAsset,\n                  nodeValue: item.JSON_Node_Value,\n                  jsonPath: item.JSONPath_Expression,\n                });\n              });\n            }\n          }\n        })\n      );\n    }\n  }\n  await Promise.all(promises);\n\n  const trimmedAssetType = body.assetType.replace(\" \", \"\");\n\n  if (\n    trimmedAssetType === \"LandingPage\" ||\n    trimmedAssetType === \"SharedContent\" ||\n    trimmedAssetType === \"DynamicContent\" ||\n    trimmedAssetType === \"EmailFooter\" ||\n    trimmedAssetType === \"EmailHeader\"\n  ) {\n    const data = getHtmlByAssetType(trimmedAssetType, body.assetJSON);\n    if (data) {\n      const doc = parse(data);\n      const result = doc.querySelectorAll(\".eloquaemail\");\n      result.forEach((item) => {\n        finalResult.push({\n          childAssetType: \"Field Merge\",\n          childAssetName: item.innerHTML,\n          nodeValue: \"id\",\n          jsonPath: \"\",\n        });\n      });\n    }\n  }\n\n  if (body.assetType === \"Email\" || body.assetType === \"email\") {\n    const doc = parse(body.assetJSON.plainText);\n    const result = doc.querySelectorAll(\"[layoutid]\");\n    result.forEach((item) => {\n      finalResult.push({\n        childAssetType: \"Signature Layout\",\n        childAssetId: item.getAttribute(\"layoutid\"),\n        nodeValue: \"email_signatureLayout\",\n        jsonPath: \"\",\n      });\n    });\n\n    if (body.assetJSON.subject.search(\"<eloqua type=\") !== -1) {\n      const subject = parse(body.assetJSON.subject);\n      const item = subject.querySelector(\"eloqua\");\n      finalResult.push({\n        childAssetType: \"Field Merge\",\n        childAssetName: item.innerHTML,\n        nodeValue: \"email_subject\",\n        jsonPath: \"\",\n      });\n    }\n  }\n\n  return {\n    statusCode: 200,\n    body: JSON.stringify(finalResult),\n    // body: JSON.stringify(childAssetsConfiguration),\n  };\n};\n\ninterface Endpoint {\n  Endpoint_URL: string;\n  Depth: string;\n}\n\ninterface Body {\n  assetType: string;\n  assetJSON: AssetJSON;\n}\n\ninterface AssetJSON {\n  elements: [];\n  processingSteps: [];\n  htmlContent: {\n    html: string;\n    htmlBody: string;\n  };\n  contentHtml: {\n    html: string;\n    htmlBody: string;\n  };\n  defaultContentSection: {\n    contentHtml: {\n      html: string;\n      htmlBody: string;\n    };\n  };\n  body: string;\n  plainText: string;\n  subject: string;\n}\n\ninterface childAssetsConfiguration {\n  JSON_Node_Type_In_Parent: number;\n  JSONPath_Expression: string;\n  JSON_Node_Value: string;\n  JSON_Node_Type: string;\n}\n\ninterface Node {\n  id: string;\n}\n",{"ruleId":"14","severity":1,"message":"15","line":183,"column":11,"nodeType":"16","messageId":"17","endLine":183,"endColumn":18},{"ruleId":"18","severity":1,"message":"19","line":30,"column":42,"nodeType":"20","messageId":"21","endLine":30,"endColumn":45,"suggestions":"22"},{"ruleId":"18","severity":1,"message":"19","line":47,"column":27,"nodeType":"20","messageId":"21","endLine":47,"endColumn":30,"suggestions":"23"},"@typescript-eslint/no-unused-vars","'uniqIds' is assigned a value but never used.","Identifier","unusedVar","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["24","25"],["26","27"],{"messageId":"28","fix":"29","desc":"30"},{"messageId":"31","fix":"32","desc":"33"},{"messageId":"28","fix":"34","desc":"30"},{"messageId":"31","fix":"35","desc":"33"},"suggestUnknown",{"range":"36","text":"37"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"36","text":"38"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"39","text":"37"},{"range":"39","text":"38"},[897,900],"unknown","never",[1289,1292]]